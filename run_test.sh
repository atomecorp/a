#!/bin/bash

# üöÄ SCRIPT COMPLET D'AUTOMATISATION DES TESTS SQH
# Cr√©e tous les fichiers et lance tous les tests automatiquement
# Usage: ./complete-sqh-tests.sh

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables globales
PROJECT_ROOT="$(pwd)"
TESTS_DIR="$PROJECT_ROOT/tests"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

log() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
header() { echo -e "${PURPLE}üöÄ $1${NC}\n${PURPLE}$(printf '=%.0s' {1..60})${NC}"; }

# 1. VERIFICATION ET PREPARATION
setup_environment() {
  header "PREPARATION DE L'ENVIRONNEMENT"
  
  # V√©rifier Node.js
  if ! command -v node &> /dev/null; then
    error "Node.js requis. Installez-le depuis https://nodejs.org"
    exit 1
  fi
  
  NODE_VERSION=$(node --version | sed 's/v//' | cut -d. -f1)
  if [ "$NODE_VERSION" -lt 16 ]; then
    error "Node.js 16+ requis. Version actuelle: $(node --version)"
    exit 1
  fi
  success "Node.js $(node --version) OK"
  
  # V√©rifier la structure du projet SQH
  REQUIRED_FILES=("a/a.js" "squirrel/hyper_squirrel.js" "application/index.sqh")
  for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
      error "Fichier manquant: $file"
      error "Assurez-vous d'√™tre dans le r√©pertoire racine de votre projet SQH"
      exit 1
    fi
    success "Trouv√©: $file"
  done
  
  # Nettoyer ancien r√©pertoire de tests
  if [ -d "$TESTS_DIR" ]; then
    warn "R√©pertoire tests existant supprim√©"
    rm -rf "$TESTS_DIR"
  fi
}

# 2. CREATION STRUCTURE COMPLETE
create_test_structure() {
  header "CREATION DE LA STRUCTURE DE TESTS"
  
  # Cr√©er tous les r√©pertoires
  mkdir -p "$TESTS_DIR"/{core,suites/{framework,parsing,dsl,performance},fixtures/{samples,expected},config,scripts,reports}
  success "Structure de r√©pertoires cr√©√©e"
  
  # Configuration des chemins
  cat > "$TESTS_DIR/config/paths.js" << 'EOF'
const path = require('path');
const ROOT = path.resolve(__dirname, '../..');

module.exports = {
  framework: {
    core: path.join(ROOT, 'a/a.js'),
    identity: path.join(ROOT, 'a/particles/identity.js'),
    dimension: path.join(ROOT, 'a/particles/dimension.js')
  },
  parsing: {
    hybridParser: path.join(ROOT, 'squirrel/hyper_squirrel.js'),
    transpiler: path.join(ROOT, 'squirrel/transpiller.js')
  },
  samples: {
    main: path.join(ROOT, 'application/index.sqh'),
    fullRuby: path.join(ROOT, 'application/full_ruby.sqh')
  },
  utils: {
    native: path.join(ROOT, 'analysis/utils_native.js'),
    a: path.join(ROOT, 'analysis/utils_a.js')
  }
};
EOF
  
  # Setup JSDOM pour simulation navigateur
  cat > "$TESTS_DIR/core/setup.js" << 'EOF'
const { JSDOM } = require('jsdom');
const fs = require('fs');
const path = require('path');
const paths = require('../config/paths');

// Setup environnement navigateur
global.setupBrowser = function() {
  const dom = new JSDOM(`
    <!DOCTYPE html>
    <html><head><title>SQH Tests</title></head><body></body></html>
  `, {
    runScripts: 'dangerously',
    resources: 'usable',
    url: 'http://localhost'
  });
  
  global.window = dom.window;
  global.document = dom.window.document;
  global.navigator = dom.window.navigator;
  global.HTMLElement = dom.window.HTMLElement;
  global.Event = dom.window.Event;
  global.KeyboardEvent = dom.window.KeyboardEvent;
  
  // Mock performance API
  global.performance = {
    now: () => Date.now(),
    memory: {
      usedJSHeapSize: 50 * 1024 * 1024,
      totalJSHeapSize: 100 * 1024 * 1024,
      jsHeapSizeLimit: 2048 * 1024 * 1024
    }
  };
  
  return dom.window;
};

// Charger framework SQH complet
global.loadFramework = async function() {
  console.log('üîß Chargement framework SQH...');
  const window = setupBrowser();
  
  const filesToLoad = [
    paths.framework.core,
    paths.framework.identity,
    paths.framework.dimension,
    paths.utils.native,
    paths.utils.a,
    paths.parsing.hybridParser,
    paths.parsing.transpiler
  ];
  
  for (const filePath of filesToLoad) {
    if (fs.existsSync(filePath)) {
      const code = fs.readFileSync(filePath, 'utf8');
      try {
        window.eval(code);
        console.log(`  ‚úÖ ${path.basename(filePath)}`);
      } catch (err) {
        console.warn(`  ‚ö†Ô∏è  Erreur ${path.basename(filePath)}: ${err.message}`);
      }
    } else {
      console.warn(`  ‚ö†Ô∏è  Non trouv√©: ${filePath}`);
    }
  }
  
  // V√©rifications
  if (typeof window.A === 'undefined') {
    console.warn('‚ö†Ô∏è  Framework A non charg√© - cr√©ation mock');
    window.A = class MockA {
      constructor(config = {}) {
        this._data = config;
        this.element = window.document.createElement('div');
        if (config.id) {
          this.element.id = config.id;
          if (!window._registry) window._registry = {};
          window._registry[config.id] = this;
        }
      }
      width(v) { return v !== undefined ? (this._data.width = v, this) : this._data.width; }
      height(v) { return v !== undefined ? (this._data.height = v, this) : this._data.height; }
      color(v) { return v !== undefined ? (this._data.color = v, this) : this._data.color; }
      onclick(fn) { this.element.onclick = fn; return this; }
    };
  }
  
  if (!window._registry) window._registry = {};
  if (!window._particles) window._particles = {};
  
  if (!window.hybridParser) {
    console.warn('‚ö†Ô∏è  Parser non trouv√© - cr√©ation mock');
    window.hybridParser = {
      transpileRuby: (code) => code.replace(/A\.new/g, 'new A').replace(/puts\s+(.+)/g, 'console.log($1);'),
      processHybridFile: function(code) { return this.transpileRuby(code); }
    };
  }
  
  if (!window.puts) {
    window.puts = (msg) => console.log(msg);
  }
  
  if (!window.grab) {
    window.grab = (id) => window.document.getElementById(id);
  }
  
  console.log('‚úÖ Framework SQH charg√©');
  return window;
};

global.loadSQHFile = function(filePath) {
  return fs.readFileSync(filePath, 'utf8');
};
EOF
  
  success "Fichiers de configuration cr√©√©s"
}

# 3. TESTS DU FRAMEWORK A
create_framework_tests() {
  header "CREATION DES TESTS FRAMEWORK A"
  
  cat > "$TESTS_DIR/suites/framework/a-core.test.js" << 'EOF'
require('../../core/setup');

describe('Framework A - Tests complets', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  afterEach(() => {
    // Nettoyer le registre apr√®s chaque test
    if (window._registry) {
      Object.keys(window._registry).forEach(key => {
        if (key.startsWith('test-')) delete window._registry[key];
      });
    }
  });
  
  describe('Cr√©ation d\'instances', () => {
    test('devrait cr√©er une instance A basique', () => {
      const instance = new window.A({
        id: 'test-basic',
        width: 100,
        height: 100,
        color: 'red'
      });
      
      expect(instance).toBeDefined();
      expect(instance.element).toBeDefined();
      expect(instance._data.id).toBe('test-basic');
      expect(instance._data.width).toBe(100);
    });
    
    test('devrait enregistrer dans le registre global', () => {
      const instance = new window.A({ id: 'test-registry' });
      expect(window._registry['test-registry']).toBe(instance);
    });
    
    test('devrait permettre le cha√Ænage de m√©thodes', () => {
      const instance = new window.A({ id: 'test-chaining' })
        .width(200)
        .height(150)
        .color('blue');
        
      expect(instance._data.width).toBe(200);
      expect(instance._data.height).toBe(150);
      expect(instance._data.color).toBe('blue');
    });
    
    test('devrait cr√©er l\'√©l√©ment DOM correspondant', () => {
      const instance = new window.A({
        id: 'test-dom',
        width: 300,
        height: 200
      });
      
      expect(instance.element.tagName).toBe('DIV');
      expect(instance.element.id).toBe('test-dom');
    });
  });
  
  describe('Gestion des propri√©t√©s', () => {
    test('devrait g√©rer les getters/setters', () => {
      const instance = new window.A({ id: 'test-props' });
      
      instance.width(250);
      expect(instance.width()).toBe(250);
      
      instance.height(180);
      expect(instance.height()).toBe(180);
    });
    
    test('devrait retourner this pour le cha√Ænage', () => {
      const instance = new window.A({ id: 'test-chain' });
      const result = instance.width(100);
      expect(result).toBe(instance);
    });
  });
  
  describe('√âv√©nements', () => {
    test('devrait pouvoir attacher des √©v√©nements onclick', () => {
      const instance = new window.A({ id: 'test-events' });
      let clicked = false;
      
      instance.onclick(() => { clicked = true; });
      
      // Simuler le clic
      instance.element.click();
      expect(clicked).toBe(true);
    });
  });
});
EOF
  
  success "Tests framework A cr√©√©s"
}

# 4. TESTS DE PARSING
create_parsing_tests() {
  header "CREATION DES TESTS DE PARSING"
  
  cat > "$TESTS_DIR/suites/parsing/transpilation.test.js" << 'EOF'
require('../../core/setup');

describe('Parsing et transpilation DSL', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  describe('Transpilation Ruby vers JavaScript', () => {
    test('devrait transpiler puts basique', () => {
      const rubyCode = 'puts "Hello World"';
      const result = window.hybridParser.transpileRuby(rubyCode);
      
      expect(result).toContain('console.log');
      expect(result).toContain('"Hello World"');
    });
    
    test('devrait transpiler A.new vers new A', () => {
      const rubyCode = 'container = A.new({width: 100, height: 100})';
      const result = window.hybridParser.transpileRuby(rubyCode);
      
      expect(result).toContain('new A');
      expect(result).not.toContain('A.new');
    });
    
    test('devrait g√©rer les objets complexes', () => {
      const rubyCode = `container = A.new({
        id: 'complex',
        width: 200,
        height: 150,
        color: 'blue'
      })`;
      
      const result = window.hybridParser.transpileRuby(rubyCode);
      expect(result).toContain('new A');
      expect(result).toContain('complex');
    });
    
    test('devrait pr√©server le JavaScript existant', () => {
      const mixedCode = `
        console.log("JS code");
        container = A.new({width: 100});
        const jsVar = "test";
      `;
      
      const result = window.hybridParser.processHybridFile(mixedCode);
      expect(result).toContain('console.log("JS code")');
      expect(result).toContain('const jsVar = "test"');
      expect(result).toContain('new A');
    });
  });
  
  describe('Gestion des blocs do...end', () => {
    test('devrait transpiler les blocs onclick', () => {
      const rubyCode = `container.onclick do
        puts "clicked"
      end`;
      
      const result = window.hybridParser.transpileRuby(rubyCode);
      expect(result).toMatch(/onclick.*=>/);
    });
    
    test('devrait g√©rer les param√®tres de bloc', () => {
      const rubyCode = `container.keyboard do |key|
        puts key.code
      end`;
      
      const result = window.hybridParser.transpileRuby(rubyCode);
      expect(result).toMatch(/key.*=>/);
    });
  });
  
  describe('Cas d\'erreur et robustesse', () => {
    test('devrait g√©rer du code invalide sans crash', () => {
      const invalidCode = 'invalid ruby syntax !!!';
      
      expect(() => {
        window.hybridParser.transpileRuby(invalidCode);
      }).not.toThrow();
    });
    
    test('devrait g√©rer les cha√Ænes vides', () => {
      expect(() => {
        window.hybridParser.transpileRuby('');
      }).not.toThrow();
    });
    
    test('devrait g√©rer null/undefined', () => {
      expect(() => {
        window.hybridParser.transpileRuby(null);
      }).not.toThrow();
    });
  });
});
EOF
  
  success "Tests de parsing cr√©√©s"
}

# 5. TESTS DES FICHIERS .SQH REELS
create_dsl_tests() {
  header "CREATION DES TESTS DSL (.SQH)"
  
  cat > "$TESTS_DIR/suites/dsl/real-files.test.js" << 'EOF'
require('../../core/setup');
const paths = require('../../config/paths');

describe('Tests des fichiers .sqh r√©els', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  describe('Fichier application/index.sqh', () => {
    test('devrait charger le fichier principal', () => {
      try {
        const content = loadSQHFile(paths.samples.main);
        expect(content).toBeDefined();
        expect(content.length).toBeGreaterThan(0);
        console.log(`üìÑ Fichier charg√©: ${content.length} caract√®res`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Fichier non accessible: ${error.message}`);
        // Test optionnel - ne pas faire √©chouer
      }
    });
    
    test('devrait parser le contenu sans erreur', () => {
      try {
        const content = loadSQHFile(paths.samples.main);
        const result = window.hybridParser.processHybridFile(content);
        
        expect(result).toBeDefined();
        console.log('‚úÖ Parsing r√©ussi');
        
        // V√©rifications basiques du contenu transpir√©
        if (content.includes('A.new')) {
          expect(result).toContain('new A');
        }
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Test ignor√©: ${error.message}`);
      }
    });
    
    test('devrait d√©tecter les patterns SQH', () => {
      try {
        const content = loadSQHFile(paths.samples.main);
        
        const patterns = {
          hasANew: content.includes('A.new('),
          hasDoBlocks: content.includes(' do'),
          hasPuts: content.includes('puts '),
          hasGrab: content.includes('grab('),
          hasEvents: content.includes('onclick') || content.includes('keyboard')
        };
        
        console.log('üìä Patterns d√©tect√©s:', patterns);
        
        // Au moins un pattern SQH devrait √™tre pr√©sent
        const hasAnySQH = Object.values(patterns).some(Boolean);
        if (hasAnySQH) {
          expect(hasAnySQH).toBe(true);
        } else {
          console.log('‚ÑπÔ∏è  Fichier sans syntaxe SQH d√©tect√©e');
        }
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Test patterns ignor√©: ${error.message}`);
      }
    });
  });
  
  describe('Test avec exemples cr√©√©s', () => {
    test('devrait traiter un exemple simple', () => {
      const simpleCode = `
        puts "Hello SQH World"
        container = A.new({
          id: 'test_container',
          width: 200,
          height: 150
        })
        container.onclick do
          puts "clicked"
        end
      `;
      
      const result = window.hybridParser.processHybridFile(simpleCode);
      
      expect(result).toContain('new A');
      expect(result).not.toContain('A.new');
      expect(result).toMatch(/onclick.*=>/);
      
      console.log('‚úÖ Exemple simple trait√© avec succ√®s');
    });
    
    test('devrait g√©rer la syntaxe mixte', () => {
      const mixedCode = `
        console.log("Pure JavaScript");
        
        const jsVariable = "test";
        
        container = A.new({id: 'mixed'})
        container.onclick do
          puts "Ruby-style event"
        end
        
        document.getElementById('mixed').style.color = 'red';
      `;
      
      const result = window.hybridParser.processHybridFile(mixedCode);
      
      expect(result).toContain('console.log("Pure JavaScript")');
      expect(result).toContain('const jsVariable');
      expect(result).toContain('new A');
      expect(result).toContain('getElementById');
      
      console.log('‚úÖ Syntaxe mixte trait√©e avec succ√®s');
    });
  });
});
EOF
  
  success "Tests DSL cr√©√©s"
}

# 6. TESTS DE PERFORMANCE
create_performance_tests() {
  header "CREATION DES TESTS DE PERFORMANCE"
  
  cat > "$TESTS_DIR/suites/performance/benchmarks.test.js" << 'EOF'
require('../../core/setup');

describe('Tests de performance SQH', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  afterEach(() => {
    // Nettoyer le registre apr√®s chaque test
    if (window._registry) {
      Object.keys(window._registry).forEach(key => {
        if (key.startsWith('perf-') || key.startsWith('bench-')) {
          delete window._registry[key];
        }
      });
    }
  });
  
  describe('Performance de cr√©ation d\'instances', () => {
    test('devrait cr√©er 100 instances rapidement', () => {
      const startTime = Date.now();
      const instances = [];
      
      for (let i = 0; i < 100; i++) {
        instances.push(new window.A({
          id: `perf-test-${i}`,
          width: i % 500,
          height: i % 400,
          color: `rgb(${i % 255}, ${i % 255}, ${i % 255})`
        }));
      }
      
      const duration = Date.now() - startTime;
      const throughput = Math.round(100 / duration * 1000); // instances/sec
      
      console.log(`‚ö° 100 instances cr√©√©es en ${duration}ms (${throughput} inst/sec)`);
      
      expect(duration).toBeLessThan(200); // Moins de 200ms acceptable
      expect(instances.length).toBe(100);
      
      // V√©rification int√©grit√©
      expect(instances[50]._data.id).toBe('perf-test-50');
    });
    
    test('devrait g√©rer 1000 instances sans probl√®me', () => {
      const startTime = Date.now();
      const instances = [];
      
      try {
        for (let i = 0; i < 1000; i++) {
          instances.push(new window.A({
            id: `bench-${i}`,
            width: 10,
            height: 10
          }));
        }
        
        const duration = Date.now() - startTime;
        const throughput = Math.round(1000 / duration * 1000);
        
        console.log(`‚ö° 1000 instances: ${duration}ms (${throughput} inst/sec)`);
        
        expect(duration).toBeLessThan(2000); // Moins de 2 secondes
        expect(instances.length).toBe(1000);
        
      } catch (error) {
        console.error('‚ùå Erreur cr√©ation massive:', error.message);
        throw error;
      }
    });
  });
  
  describe('Performance de transpilation', () => {
    test('devrait transpiler rapidement', () => {
      const rubyCode = `
        container = A.new({width: 100, height: 100})
        container.onclick do
          puts "clicked"
        end
        wait 1000 do
          puts "delayed"
        end
      `;
      
      const startTime = Date.now();
      
      // 50 transpilations
      for (let i = 0; i < 50; i++) {
        window.hybridParser.transpileRuby(rubyCode);
      }
      
      const duration = Date.now() - startTime;
      const avgTime = duration / 50;
      
      console.log(`‚ö° 50 transpilations: ${duration}ms (${avgTime.toFixed(2)}ms/transpilation)`);
      
      expect(duration).toBeLessThan(1000); // Moins d'1 seconde pour 50
      expect(avgTime).toBeLessThan(20); // Moins de 20ms par transpilation
    });
    
    test('devrait traiter des fichiers volumineux', () => {
      const largeCode = Array(100).fill(`
        container_{{i}} = A.new({
          id: 'large_{{i}}',
          width: {{i}},
          height: {{i}}
        })
        container_{{i}}.onclick do
          puts "Large file test {{i}}"
          grab("large_{{i}}").backgroundColor("color_{{i}}")
        end
      `).join('\n').replace(/\{\{i\}\}/g, () => Math.floor(Math.random() * 1000));
      
      const startTime = Date.now();
      const result = window.hybridParser.processHybridFile(largeCode);
      const duration = Date.now() - startTime;
      
      console.log(`‚ö° Fichier volumineux (${largeCode.length} chars): ${duration}ms`);
      
      expect(result).toBeDefined();
      expect(result.length).toBeGreaterThan(0);
      expect(duration).toBeLessThan(5000); // Moins de 5 secondes
    });
  });
  
  describe('Tests de m√©moire', () => {
    test('ne devrait pas avoir de fuites majeures', () => {
      const initialMemory = global.performance.memory.usedJSHeapSize;
      
      // Cycles de cr√©ation/destruction
      for (let cycle = 0; cycle < 5; cycle++) {
        const instances = [];
        
        // Cr√©er 200 instances
        for (let i = 0; i < 200; i++) {
          instances.push(new window.A({
            id: `memory-test-${cycle}-${i}`,
            width: i,
            height: i
          }));
        }
        
        // Nettoyer explicitement
        instances.forEach(instance => {
          if (window._registry && instance._data.id) {
            delete window._registry[instance._data.id];
          }
        });
      }
      
      const finalMemory = global.performance.memory.usedJSHeapSize;
      const memoryIncrease = finalMemory - initialMemory;
      
      console.log(`üíæ Augmentation m√©moire: ${Math.round(memoryIncrease / 1024)}KB`);
      
      // Moins de 10MB d'augmentation acceptable
      expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024);
    });
  });
  
  describe('Tests de stress', () => {
    test('devrait r√©sister aux appels rapides', () => {
      const instance = new window.A({ id: 'stress-test' });
      
      const startTime = Date.now();
      
      // 1000 modifications rapides
      for (let i = 0; i < 1000; i++) {
        instance
          .width(i % 500)
          .height(i % 400)
          .color(`hsl(${i % 360}, 50%, 50%)`);
      }
      
      const duration = Date.now() - startTime;
      console.log(`üí™ 1000 modifications en ${duration}ms`);
      
      expect(duration).toBeLessThan(100); // Tr√®s rapide
      expect(instance._data.width).toBe(999 % 500);
    });
  });
});
EOF
  
  success "Tests de performance cr√©√©s"
}

# 7. SYSTEME D'EXECUTION AVEC JEST/MOCHA
create_test_runner() {
  header "CREATION DU SYSTEME D'EXECUTION"
  
  # Package.json avec d√©pendances
  cat > "$TESTS_DIR/package.json" << 'EOF'
{
  "name": "sqh-framework-tests",
  "version": "1.0.0",
  "description": "Tests automatis√©s pour le framework SQH",
  "scripts": {
  "test": "node scripts/run-all-tests.js",
  "test:framework": "node scripts/run-tests.js framework",
  "test:parsing": "node scripts/run-tests.js parsing",
  "test:dsl": "node scripts/run-tests.js dsl",
  "test:performance": "node scripts/run-tests.js performance",
  "test:all": "node scripts/run-tests.js all",
  "report": "node scripts/generate-report.js"
  },
  "devDependencies": {
  "jsdom": "^22.0.0"
  }
}
EOF
  
  # Runner principal ultra-simplifi√©
  cat > "$TESTS_DIR/scripts/run-all-tests.js" << 'EOF'
#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const TESTS_DIR = path.join(__dirname, '..');
const SUITES_DIR = path.join(TESTS_DIR, 'suites');

// Couleurs
const colors = {
  info: '\x1b[34m',
  success: '\x1b[32m',
  error: '\x1b[31m',
  warn: '\x1b[33m',
  reset: '\x1b[0m'
};

function log(msg, color = 'info') {
  console.log(`${colors[color]}${msg}${colors.reset}`);
}

// Fonction pour ex√©cuter un test avec Jest-like
function runTest(testFile) {
  const content = fs.readFileSync(testFile, 'utf8');
  const testName = path.basename(testFile);
  
  log(`\nüìù Ex√©cution: ${testName}`, 'info');
  
  try {
    // Cr√©er un contexte d'ex√©cution
    const testCode = `
      ${content}
      
      // Jest-like mocks
      global.describe = function(name, fn) {
        console.log('\\nüß™ Suite: ' + name);
        fn();
      };
      
      global.test = function(name, fn) {
        try {
          console.log('  ‚ñ∂Ô∏è  ' + name);
          fn();
          console.log('  ‚úÖ PASS: ' + name);
          return true;
        } catch (error) {
          console.log('  ‚ùå FAIL: ' + name);
          console.log('     ' + error.message);
          return false;
        }
      };
      
      global.it = global.test; // Alias
      
      global.beforeAll = function(fn) {
        console.log('  üîß Setup global...');
        fn();
      };
      
      global.afterEach = function(fn) {
        // Mock - pas d'impl√©mentation n√©cessaire pour les tests basiques
      };
      
      global.expect = function(actual) {
        return {
          toBe: (expected) => {
            if (actual !== expected) {
              throw new Error(`Expected ${expected}, got ${actual}`);
            }
          },
          toBeGreaterThan: (expected) => {
            if (actual <= expected) {
              throw new Error(`Expected ${actual} to be greater than ${expected}`);
            }
          },
          toBeLessThan: (expected) => {
            if (actual >= expected) {
              throw new Error(`Expected ${actual} to be less than ${expected}`);
            }
          },
          toContain: (expected) => {
            if (!actual || !actual.toString().includes(expected)) {
              throw new Error(`Expected "${actual}" to contain "${expected}"`);
            }
          },
          toBeDefined: () => {
            if (actual === undefined) {
              throw new Error('Expected value to be defined');
            }
          },
          toHaveLength: (expected) => {
            if (!actual || actual.length !== expected) {
              throw new Error(`Expected length ${expected}, got ${actual ? actual.length : 'undefined'}`);
            }
          },
          toMatch: (regex) => {
            if (!actual || !regex.test(actual)) {
              throw new Error(`Expected "${actual}" to match ${regex}`);
            }
          },
          not: {
            toContain: (expected) => {
              if (actual && actual.toString().includes(expected)) {
                throw new Error(`Expected "${actual}" not to contain "${expected}"`);
              }
            },
            toThrow: () => {
              // Pour les tests qui ne doivent pas lever d'exception
              try {
                if (typeof actual === 'function') actual();
              } catch (e) {
                throw new Error(`Expected function not to throw, but it threw: ${e.message}`);
              }
            }
          }
        };
      };
    `;
    
    // Ex√©cuter le test
    eval(testCode);
    
    return { success: true, file: testName };
    
  } catch (error) {
    log(`‚ùå Erreur dans ${testName}: ${error.message}`, 'error');
    return { success: false, file: testName, error: error.message };
  }
}

// Fonction principale
async function runAllTests() {
  log('üöÄ D√©marrage des tests SQH', 'info');
  log('=' . repeat(50), 'info');
  
  const results = {
    total: 0,
    passed: 0,
    failed: 0,
    files: []
  };
  
  // Trouver tous les fichiers de test
  const testFiles = [];
  const scanDir = (dir) => {
    const items = fs.readdirSync(dir);
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDir(fullPath);
      } else if (item.endsWith('.test.js')) {
        testFiles.push(fullPath);
      }
    });
  };
  
  if (fs.existsSync(SUITES_DIR)) {
    scanDir(SUITES_DIR);
  }
  
  if (testFiles.length === 0) {
    log('‚ö†Ô∏è  Aucun fichier de test trouv√©', 'warn');
    return;
  }
  
  log(`üìã ${testFiles.length} fichiers de test trouv√©s`, 'info');
  
  // Ex√©cuter chaque test
  for (const testFile of testFiles) {
    const result = runTest(testFile);
    results.files.push(result);
    results.total++;
    
    if (result.success) {
      results.passed++;
    } else {
      results.failed++;
    }
  }
  
  // R√©sum√© final
  log('\n' + '=' . repeat(50), 'info');
  log('üìä R√âSUM√â DES TESTS', 'info');
  log('=' . repeat(50), 'info');
  
  log(`Total: ${results.total}`, 'info');
  log(`R√©ussis: ${results.passed}`, results.passed > 0 ? 'success' : 'info');
  log(`√âchou√©s: ${results.failed}`, results.failed > 0 ? 'error' : 'info');
  
  const successRate = Math.round((results.passed / results.total) * 100);
  log(`Taux de r√©ussite: ${successRate}%`, successRate >= 80 ? 'success' : 'warn');
  
  // Sauvegarder le rapport
  const reportPath = path.join(TESTS_DIR, 'reports', `test-report-${Date.now()}.json`);
  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  log(`üìÑ Rapport sauv√©: ${reportPath}`, 'info');
  
  return results;
}

// Point d'entr√©e
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests };
EOF
  
  # Runner sp√©cialis√© par suite
  cat > "$TESTS_DIR/scripts/run-tests.js" << 'EOF'
#!/usr/bin/env node

const { runAllTests } = require('./run-all-tests');
const fs = require('fs');
const path = require('path');

const TESTS_DIR = path.join(__dirname, '..');
const SUITES_DIR = path.join(TESTS_DIR, 'suites');

// Couleurs
const colors = {
  info: '\x1b[34m',
  success: '\x1b[32m',
  error: '\x1b[31m',
  warn: '\x1b[33m',
  reset: '\x1b[0m'
};

function log(msg, color = 'info') {
  console.log(`${colors[color]}${msg}${colors.reset}`);
}

// Fonction pour ex√©cuter une suite sp√©cifique
function runSpecificSuite(suiteName) {
  const suitePath = path.join(SUITES_DIR, suiteName);
  
  if (!fs.existsSync(suitePath)) {
    log(`‚ùå Suite '${suiteName}' non trouv√©e`, 'error');
    log(`Suites disponibles: ${fs.readdirSync(SUITES_DIR).join(', ')}`, 'info');
    return;
  }
  
  log(`üéØ Ex√©cution de la suite: ${suiteName}`, 'info');
  
  const testFiles = fs.readdirSync(suitePath)
    .filter(file => file.endsWith('.test.js'))
    .map(file => path.join(suitePath, file));
  
  if (testFiles.length === 0) {
    log(`‚ö†Ô∏è  Aucun test dans la suite ${suiteName}`, 'warn');
    return;
  }
  
  // Utiliser la m√™me logique que run-all-tests mais pour une suite
  const { runTest } = require('./run-all-tests');
  
  const results = {
    suite: suiteName,
    total: 0,
    passed: 0,
    failed: 0,
    files: []
  };
  
  testFiles.forEach(testFile => {
    const result = runTest(testFile);
    results.files.push(result);
    results.total++;
    
    if (result.success) {
      results.passed++;
    } else {
      results.failed++;
    }
  });
  
  // R√©sum√©
  log(`\nüìä R√©sultats suite ${suiteName}:`, 'info');
  log(`Total: ${results.total}, R√©ussis: ${results.passed}, √âchou√©s: ${results.failed}`, 'info');
  
  return results;
}

// Point d'entr√©e
const suiteArg = process.argv[2];

switch (suiteArg) {
  case 'framework':
    runSpecificSuite('framework');
    break;
  case 'parsing':
    runSpecificSuite('parsing');
    break;
  case 'dsl':
    runSpecificSuite('dsl');
    break;
  case 'performance':
    runSpecificSuite('performance');
    break;
  case 'all':
  case 'tout':
    runAllTests();
    break;
  default:
    log('Usage: node run-tests.js [framework|parsing|dsl|performance|all]', 'info');
    log('Suites disponibles:', 'info');
    if (fs.existsSync(SUITES_DIR)) {
      fs.readdirSync(SUITES_DIR).forEach(suite => {
        log(`  - ${suite}`, 'info');
      });
    }
}
EOF
  
  success "Syst√®me d'ex√©cution cr√©√©"
}

# 8. G√âN√âRATEUR DE RAPPORTS
create_report_generator() {
  header "CREATION DU G√âN√âRATEUR DE RAPPORTS"
  
  cat > "$TESTS_DIR/scripts/generate-report.js" << 'EOF'
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const TESTS_DIR = path.join(__dirname, '..');
const REPORTS_DIR = path.join(TESTS_DIR, 'reports');

// Cr√©er le r√©pertoire de rapports s'il n'existe pas
if (!fs.existsSync(REPORTS_DIR)) {
  fs.mkdirSync(REPORTS_DIR, { recursive: true });
}

function generateHTMLReport(results) {
  const timestamp = new Date().toLocaleString('fr-FR');
  const successRate = Math.round((results.passed / results.total) * 100);
  
  const html = `
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Rapport de Tests SQH</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 12px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
      color: white;
      padding: 40px;
      text-align: center;
    }
    
    .header h1 {
      margin: 0 0 10px 0;
      font-size: 2.5em;
      font-weight: 300;
    }
    
    .header p {
      margin: 0;
      opacity: 0.9;
      font-size: 1.1em;
    }
    
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      padding: 40px;
      background: #f8fafc;
    }
    
    .stat-card {
      background: white;
      padding: 30px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      border-left: 4px solid;
    }
    
    .stat-card.total { border-left-color: #3b82f6; }
    .stat-card.passed { border-left-color: #10b981; }
    .stat-card.failed { border-left-color: #ef4444; }
    .stat-card.rate { border-left-color: #8b5cf6; }
    
    .stat-number {
      font-size: 3em;
      font-weight: bold;
      margin: 0;
      color: #1f2937;
    }
    
    .stat-label {
      font-size: 1.1em;
      color: #6b7280;
      margin: 10px 0 0 0;
    }
    
    .details {
      padding: 40px;
    }
    
    .details h2 {
      color: #1f2937;
      border-bottom: 2px solid #e5e7eb;
      padding-bottom: 10px;
      margin-bottom: 30px;
    }
    
    .test-file {
      background: #f9fafb;
      margin: 20px 0;
      padding: 20px;
      border-radius: 8px;
      border-left: 4px solid;
    }
    
    .test-file.success { border-left-color: #10b981; }
    .test-file.failed { border-left-color: #ef4444; }
    
    .test-file h3 {
      margin: 0 0 10px 0;
      color: #1f2937;
    }
    
    .test-status {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.85em;
      font-weight: bold;
      text-transform: uppercase;
    }
    
    .test-status.success {
      background: #d1fae5;
      color: #065f46;
    }
    
    .test-status.failed {
      background: #fee2e2;
      color: #991b1b;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e5e7eb;
      border-radius: 4px;
      overflow: hidden;
      margin: 20px 0;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #10b981 0%, #059669 100%);
      transition: width 0.3s ease;
    }
    
    .footer {
      background: #f1f5f9;
      padding: 20px 40px;
      text-align: center;
      border-top: 1px solid #e2e8f0;
      color: #64748b;
    }
    
    @media (max-width: 768px) {
      .stats {
        grid-template-columns: 1fr;
        padding: 20px;
      }
      
      .details, .header {
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üß™ Rapport de Tests SQH</h1>
      <p>G√©n√©r√© le ${timestamp}</p>
    </div>
    
    <div class="stats">
      <div class="stat-card total">
        <div class="stat-number">${results.total}</div>
        <div class="stat-label">Tests Total</div>
      </div>
      
      <div class="stat-card passed">
        <div class="stat-number">${results.passed}</div>
        <div class="stat-label">Tests R√©ussis</div>
      </div>
      
      <div class="stat-card failed">
        <div class="stat-number">${results.failed}</div>
        <div class="stat-label">Tests √âchou√©s</div>
      </div>
      
      <div class="stat-card rate">
        <div class="stat-number">${successRate}%</div>
        <div class="stat-label">Taux de R√©ussite</div>
      </div>
    </div>
    
    <div class="progress-bar">
      <div class="progress-fill" style="width: ${successRate}%"></div>
    </div>
    
    <div class="details">
      <h2>üìã D√©tails des Tests</h2>
      
      ${results.files.map(file => `
        <div class="test-file ${file.success ? 'success' : 'failed'}">
          <h3>${file.file}</h3>
          <span class="test-status ${file.success ? 'success' : 'failed'}">
            ${file.success ? '‚úÖ R√©ussi' : '‚ùå √âchou√©'}
          </span>
          ${file.error ? `<p><strong>Erreur:</strong> ${file.error}</p>` : ''}
        </div>
      `).join('')}
    </div>
    
    <div class="footer">
      <p>Framework SQH - Syst√®me de Tests Automatis√©s v1.0</p>
    </div>
  </div>
</body>
</html>
  `;
  
  return html;
}

function findLatestReport() {
  if (!fs.existsSync(REPORTS_DIR)) {
    console.log('‚ùå Aucun rapport trouv√©. Ex√©cutez d\'abord les tests.');
    return null;
  }
  
  const reportFiles = fs.readdirSync(REPORTS_DIR)
    .filter(file => file.startsWith('test-report-') && file.endsWith('.json'))
    .sort()
    .reverse();
  
  if (reportFiles.length === 0) {
    console.log('‚ùå Aucun rapport JSON trouv√©.');
    return null;
  }
  
  return path.join(REPORTS_DIR, reportFiles[0]);
}

function main() {
  console.log('üìä G√©n√©ration du rapport HTML...');
  
  const latestReportPath = findLatestReport();
  if (!latestReportPath) return;
  
  try {
    const reportData = JSON.parse(fs.readFileSync(latestReportPath, 'utf8'));
    const htmlReport = generateHTMLReport(reportData);
    
    const htmlPath = path.join(REPORTS_DIR, 'latest-test-report.html');
    fs.writeFileSync(htmlPath, htmlReport);
    
    console.log('‚úÖ Rapport HTML g√©n√©r√©:', htmlPath);
    console.log('üåê Ouvrez le fichier dans votre navigateur pour voir les r√©sultats');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error.message);
  }
}

if (require.main === module) {
  main();
}

module.exports = { generateHTMLReport, findLatestReport };
EOF
  
  success "G√©n√©rateur de rapports cr√©√©"
}

# 9. TESTS DE R√âGRESSION AVANC√âS
create_regression_tests() {
  header "CREATION DES TESTS DE R√âGRESSION"
  
  cat > "$TESTS_DIR/suites/framework/regression.test.js" << 'EOF'
require('../../core/setup');

describe('Tests de r√©gression SQH', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  describe('R√©gression - Bugs corrig√©s', () => {
    test('devrait g√©rer les IDs avec caract√®res sp√©ciaux', () => {
      const instance = new window.A({
        id: 'test-with-dashes_and_underscores.123',
        width: 100
      });
      
      expect(instance._data.id).toBe('test-with-dashes_and_underscores.123');
      expect(window._registry['test-with-dashes_and_underscores.123']).toBe(instance);
    });
    
    test('devrait pr√©server les propri√©t√©s lors du cha√Ænage', () => {
      const instance = new window.A({ id: 'chain-test' })
        .width(100)
        .height(200)
        .color('red')
        .width(150); // Red√©finir width
      
      expect(instance._data.width).toBe(150);
      expect(instance._data.height).toBe(200);
      expect(instance._data.color).toBe('red');
    });
    
    test('devrait g√©rer les valeurs null/undefined', () => {
      expect(() => {
        new window.A({
          id: 'null-test',
          width: null,
          height: undefined,
          color: ''
        });
      }).not.toThrow();
    });
    
    test('devrait nettoyer le registre correctement', () => {
      const id1 = 'cleanup-test-1';
      const id2 = 'cleanup-test-2';
      
      new window.A({ id: id1 });
      new window.A({ id: id2 });
      
      expect(window._registry[id1]).toBeDefined();
      expect(window._registry[id2]).toBeDefined();
      
      // Simulation nettoyage
      delete window._registry[id1];
      
      expect(window._registry[id1]).toBeUndefined();
      expect(window._registry[id2]).toBeDefined();
    });
  });
  
  describe('R√©gression - Performance', () => {
    test('devrait maintenir les performances avec de nombreuses propri√©t√©s', () => {
      const startTime = Date.now();
      
      const instance = new window.A({ id: 'perf-regression' });
      
      // D√©finir 50 propri√©t√©s
      for (let i = 0; i < 50; i++) {
        instance[`prop${i}`] = function(v) {
          if (arguments.length === 0) return this._data[`prop${i}`];
          this._data[`prop${i}`] = v;
          return this;
        };
        
        instance[`prop${i}`](`value${i}`);
      }
      
      const duration = Date.now() - startTime;
      console.log(`‚ö° 50 propri√©t√©s d√©finies en ${duration}ms`);
      
      expect(duration).toBeLessThan(50); // Moins de 50ms
      expect(instance[`prop49`]()).toBe('value49');
    });
  });
  
  describe('R√©gression - Transpilation', () => {
    test('devrait g√©rer les cha√Ænes avec caract√®res d\'√©chappement', () => {
      const rubyCode = 'puts "Hello \\"World\\" with quotes"';
      const result = window.hybridParser.transpileRuby(rubyCode);
      
      expect(result).toContain('puts');
      expect(result).toContain('Hello');
      expect(result).toContain('World');
    });
    
    test('devrait pr√©server les commentaires JavaScript', () => {
      const mixedCode = `
        // Commentaire JavaScript important
        console.log("JS code");
        # Commentaire Ruby
        puts "Ruby code"
      `;
      
      const result = window.hybridParser.processHybridFile(mixedCode);
      
      expect(result).toContain('// Commentaire JavaScript important');
      expect(result).toContain('console.log');
      expect(result).toContain('puts');
    });
    
    test('devrait g√©rer les blocs imbriqu√©s', () => {
      const rubyCode = `
        container.onclick do
          if condition
            puts "nested"
          end
        end
      `;
      
      const result = window.hybridParser.transpileRuby(rubyCode);
      
      expect(result).toContain('onclick');
      expect(result).toContain('if');
      expect(result).toContain('puts');
    });
  });
});
EOF
  
  success "Tests de r√©gression cr√©√©s"
}

# 10. INSTALLATION DES D√âPENDANCES
install_dependencies() {
  header "INSTALLATION DES D√âPENDANCES"
  
  cd "$TESTS_DIR"
  
  # Installer JSDOM si Node.js est disponible
  if command -v npm &> /dev/null; then
    log "Installation de JSDOM..."
    npm install --save-dev jsdom@^22.0.0 2>/dev/null || warn "Installation JSDOM √©chou√©e - tests limit√©s"
  else
    warn "npm non disponible - tests en mode minimal"
  fi
  
  cd "$PROJECT_ROOT"
  success "D√©pendances install√©es"
}

# 11. TESTS D'INT√âGRATION AVANC√âS
create_integration_tests() {
  header "CREATION DES TESTS D'INT√âGRATION"
  
  cat > "$TESTS_DIR/suites/dsl/integration.test.js" << 'EOF'
require('../../core/setup');

describe('Tests d\'int√©gration SQH avanc√©s', () => {
  let window;
  
  beforeAll(async () => {
    window = await loadFramework();
  });
  
  describe('Int√©gration Framework + Parser', () => {
    test('devrait cr√©er et manipuler des instances via DSL', () => {
      const sqhCode = `
        main_container = A.new({
          id: 'integration-test',
          width: 300,
          height: 200,
          color: 'blue'
        })
        
        main_container.onclick do
          puts "Integration test clicked"
          grab("integration-test").backgroundColor("green")
        end
      `;
      
      // Transpiler le code
      const jsCode = window.hybridParser.processHybridFile(sqhCode);
      
      // V√©rifier la transpilation
      expect(jsCode).toContain('new A');
      expect(jsCode).toContain('integration-test');
      expect(jsCode).toContain('onclick');
      
      // Ex√©cuter le code
      try {
        eval(jsCode);
        
        // V√©rifier que l'instance existe
        const instance = window._registry['integration-test'];
        expect(instance).toBeDefined();
        expect(instance._data.width).toBe(300);
        expect(instance._data.height).toBe(200);
        
        console.log('‚úÖ Int√©gration Framework + Parser r√©ussie');
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Ex√©cution partielle: ${error.message}`);
        // Test partiellement r√©ussi si la transpilation fonctionne
      }
    });
    
    test('devrait g√©rer les √©v√©nements complexes', () => {
      const sqhCode = `
        event_container = A.new({
          id: 'event-test',
          width: 150,
          height: 100
        })
        
        event_container.keyboard do |key|
          puts "Key pressed: #{key.code}"
          if key.ctrl && key.key == "s"
            puts "Save shortcut detected"
            key.preventDefault
          end
        end
      `;
      
      const jsCode = window.hybridParser.processHybridFile(sqhCode);
      
      expect(jsCode).toContain('addEventListener');
      expect(jsCode).toContain('keydown');
      expect(jsCode).toContain('preventDefault');
      expect(jsCode).toContain('key.ctrlKey');
      
      console.log('‚úÖ √âv√©nements complexes transpil√©s correctement');
    });
    
    test('devrait supporter les interactions DOM', () => {
      const sqhCode = `
        dom_container = A.new({
          id: 'dom-interaction',
          width: 250,
          height: 150,
          color: 'yellow'
        })
        
        wait 100 do
          grab("dom-interaction").backgroundColor("purple")
          grab("dom-interaction").width(300)
        end
      `;
      
      const jsCode = window.hybridParser.processHybridFile(sqhCode);
      
      expect(jsCode).toContain('setTimeout');
      expect(jsCode).toContain('grab');
      expect(jsCode).toContain('backgroundColor');
      expect(jsCode).toContain('100');
      
      console.log('‚úÖ Interactions DOM transpil√©es correctement');
    });
  });
  
  describe('Tests de compatibilit√© mixte', () => {
    test('devrait m√©langer JavaScript et SQH sans conflit', () => {
      const mixedCode = `
        // JavaScript pur
        const jsVariable = "test value";
        console.log("JavaScript section");
        
        // Section SQH
        mixed_container = A.new({
          id: 'mixed-test',
          width: 200,
          height: 100
        })
        
        // Retour au JavaScript
        document.addEventListener('DOMContentLoaded', function() {
          console.log('DOM ready');
        });
        
        // Section SQH avec √©v√©nement
        mixed_container.onclick do
          puts "Mixed syntax works!"
        end
      `;
      
      const result = window.hybridParser.processHybridFile(mixedCode);
      
      // V√©rifier que le JavaScript est pr√©serv√©
      expect(result).toContain('const jsVariable');
      expect(result).toContain('console.log("JavaScript section")');
      expect(result).toContain('addEventListener');
      
      // V√©rifier que le SQH est transpil√©
      expect(result).toContain('new A');
      expect(result).toContain('onclick');
      expect(result).toContain('puts');
      
      console.log('‚úÖ Syntaxe mixte compatible');
    });
  });
  
  describe('Tests de robustesse', () => {
    test('devrait g√©rer les erreurs de syntaxe gracieusement', () => {
      const invalidCode = `
        valid_container = A.new({id: 'valid'})
        
        // Syntaxe invalide intentionnelle
        invalid syntax here !!!
        
        another_container = A.new({id: 'another'})
      `;
      
      expect(() => {
        window.hybridParser.processHybridFile(invalidCode);
      }).not.toThrow();
      
      console.log('‚úÖ Gestion d\'erreurs robuste');
    });
    
    test('devrait traiter les fichiers vides', () => {
      expect(() => {
        window.hybridParser.processHybridFile('');
        window.hybridParser.processHybridFile('   ');
        window.hybridParser.processHybridFile('\n\n\n');
      }).not.toThrow();
      
      console.log('‚úÖ Fichiers vides g√©r√©s correctement');
    });
  });
});
EOF
  
  success "Tests d'int√©gration cr√©√©s"
}

# 12. SCRIPT DE LANCEMENT AUTOMATIQUE
create_launcher() {
  header "CREATION DU SCRIPT DE LANCEMENT"
  
  cat > "$TESTS_DIR/launch-tests.sh" << 'EOF'
#!/bin/bash

# üöÄ Script de lancement rapide des tests SQH
# Usage: ./launch-tests.sh [suite]

TESTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$TESTS_DIR"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üß™ Lancement des tests SQH${NC}"
echo -e "${BLUE}================================${NC}"

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js requis pour les tests complets${NC}"
    echo "Installation recommand√©e: https://nodejs.org"
    exit 1
fi

# Installer les d√©pendances si n√©cessaire
if [ ! -d "node_modules" ]; then
    echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
    npm install --silent
fi

# Ex√©cuter les tests selon l'argument
case "${1:-all}" in
    "framework"|"fw")
        echo -e "${GREEN}üîß Tests du framework A${NC}"
        node scripts/run-tests.js framework
        ;;
    "parsing"|"parse")
        echo -e "${GREEN}üîÑ Tests de parsing/transpilation${NC}"
        node scripts/run-tests.js parsing
        ;;
    "dsl"|"sqh")
        echo -e "${GREEN}üìù Tests DSL .sqh${NC}"
        node scripts/run-tests.js dsl
        ;;
    "performance"|"perf")
        echo -e "${GREEN}‚ö° Tests de performance${NC}"
        node scripts/run-tests.js performance
        ;;
    "all"|"tout"|"")
        echo -e "${GREEN}üöÄ Tous les tests${NC}"
        node scripts/run-all-tests.js
        ;;
    "report"|"rapport")
        echo -e "${GREEN}üìä G√©n√©ration du rapport${NC}"
        node scripts/generate-report.js
        ;;
    "help"|"aide"|"-h"|"--help")
        echo "Usage: ./launch-tests.sh [suite]"
        echo ""
        echo "Suites disponibles:"
        echo "  framework, fw    - Tests du framework A"
        echo "  parsing, parse   - Tests de parsing/transpilation"
        echo "  dsl, sqh         - Tests DSL .sqh"
        echo "  performance, perf - Tests de performance"
        echo "  all, tout        - Tous les tests (d√©faut)"
        echo "  report, rapport  - G√©n√©rer rapport HTML"
        echo "  help, aide       - Cette aide"
        exit 0
        ;;
    *)
        echo -e "${YELLOW}‚ö†Ô∏è  Suite inconnue: $1${NC}"
        echo "Utilisez './launch-tests.sh help' pour voir les options"
        exit 1
        ;;
esac

# G√©n√©rer le rapport automatiquement apr√®s les tests
if [ "$1" != "report" ] && [ "$1" != "help" ]; then
    echo -e "\n${BLUE}üìä G√©n√©ration du rapport HTML...${NC}"
    node scripts/generate-report.js
fi

echo -e "\n${GREEN}‚úÖ Tests termin√©s!${NC}"
EOF
  
  chmod +x "$TESTS_DIR/launch-tests.sh"
  
  # Script principal pour le projet
  cat > "$PROJECT_ROOT/run-sqh-tests.sh" << EOF
#!/bin/bash

# üöÄ Script principal de tests SQH
# Raccourci vers le syst√®me de tests

SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
TESTS_DIR="\$SCRIPT_DIR/tests"

if [ ! -d "\$TESTS_DIR" ]; then
    echo "‚ùå Syst√®me de tests non trouv√©"
    echo "Ex√©cutez d'abord: ./complete-sqh-tests.sh"
    exit 1
fi

cd "\$TESTS_DIR"
./launch-tests.sh "\$@"
EOF
  
  chmod +x "$PROJECT_ROOT/run-sqh-tests.sh"
  
  success "Scripts de lancement cr√©√©s"
}

# 13. DOCUMENTATION AUTOMATIQUE
create_documentation() {
  header "CREATION DE LA DOCUMENTATION"
  
  cat > "$TESTS_DIR/README.md" << 'EOF'
# üß™ Syst√®me de Tests SQH

## Vue d'ensemble

Ce syst√®me de tests automatis√©s valide le framework SQH (Squirrel Hybrid) et le format de fichiers .sqh. Il teste l'int√©gration entre Ruby et JavaScript, la transpilation, les performances et la robustesse.

## Structure du projet

```
tests/
‚îú‚îÄ‚îÄ core/              # Configuration et setup
‚îÇ   ‚îî‚îÄ‚îÄ setup.js       # Environnement de test JSDOM
‚îú‚îÄ‚îÄ config/            # Configuration des chemins
‚îÇ   ‚îî‚îÄ‚îÄ paths.js       # Chemins vers les fichiers du framework
‚îú‚îÄ‚îÄ suites/            # Suites de tests
‚îÇ   ‚îú‚îÄ‚îÄ framework/     # Tests du framework A
‚îÇ   ‚îú‚îÄ‚îÄ parsing/       # Tests de transpilation Ruby‚ÜíJS
‚îÇ   ‚îú‚îÄ‚îÄ dsl/          # Tests des fichiers .sqh
‚îÇ   ‚îî‚îÄ‚îÄ performance/   # Tests de performance
‚îú‚îÄ‚îÄ scripts/           # Scripts d'ex√©cution
‚îÇ   ‚îú‚îÄ‚îÄ run-all-tests.js
‚îÇ   ‚îú‚îÄ‚îÄ run-tests.js
‚îÇ   ‚îî‚îÄ‚îÄ generate-report.js
‚îú‚îÄ‚îÄ reports/           # Rapports g√©n√©r√©s
‚îî‚îÄ‚îÄ fixtures/          # Donn√©es de test
```

## D√©marrage rapide

### Installation
```bash
# Depuis le r√©pertoire racine du projet
./complete-sqh-tests.sh
```

### Ex√©cution des tests
```bash
# Tous les tests
./run-sqh-tests.sh

# Suite sp√©cifique
./run-sqh-tests.sh framework
./run-sqh-tests.sh parsing
./run-sqh-tests.sh dsl
./run-sqh-tests.sh performance

# G√©n√©rer le rapport HTML
./run-sqh-tests.sh report
```

### Depuis le r√©pertoire tests/
```bash
# Via le script de lancement
./launch-tests.sh [suite]

# Via Node.js directement
node scripts/run-all-tests.js
node scripts/run-tests.js framework
node scripts/generate-report.js
```

## Types de tests

### 1. Tests Framework A (`framework/`)
- Cr√©ation d'instances
- Cha√Ænage de m√©thodes
- Gestion des propri√©t√©s
- Syst√®me de particules
- Registre global
- √âv√©nements DOM

### 2. Tests de Parsing (`parsing/`)
- Transpilation Ruby ‚Üí JavaScript
- Gestion des blocs `do...end`
- Conversion `A.new()` ‚Üí `new A()`
- Pr√©servation du JavaScript existant
- Gestion des erreurs de syntaxe

### 3. Tests DSL (`dsl/`)
- Fichiers .sqh r√©els
- Syntaxe mixte Ruby/JavaScript
- Patterns SQH (A.new, puts, grab, etc.)
- Int√©gration compl√®te
- Cas d'usage complexes

### 4. Tests Performance (`performance/`)
- Vitesse de cr√©ation d'instances
- Performance de transpilation
- Gestion m√©moire
- Tests de stress
- Benchmarks comparatifs

## Rapports

### Rapport JSON
Les r√©sultats sont sauv√©s en JSON dans `reports/test-report-[timestamp].json`:

```json
{
  "total": 25,
  "passed": 23,
  "failed": 2,
  "files": [
    {
      "success": true,
      "file": "a-core.test.js"
    }
  ]
}
```

### Rapport HTML
Un rapport visuel est g√©n√©r√© dans `reports/latest-test-report.html`:
- Statistiques globales
- Graphiques de progression
- D√©tails par fichier
- Historique des erreurs

## Configuration

### Chemins personnalis√©s
Modifiez `config/paths.js` pour adapter les chemins √† votre structure:

```javascript
module.exports = {
    framework: {
        core: path.join(ROOT, 'votre/chemin/a.js'),
        // ...
    }
};
```

### Seuils de performance
Les seuils sont d√©finis dans les tests eux-m√™mes:

```javascript
// Exemple: moins de 200ms pour cr√©er 100 instances
expect(duration).toBeLessThan(200);
```

## Ajout de nouveaux tests

### Nouveau fichier de test
Cr√©ez `suites/[categorie]/nouveau-test.test.js`:

```javascript
require('../../core/setup');

describe('Mon nouveau test', () => {
    let window;
    
    beforeAll(async () => {
        window = await loadFramework();
    });
    
    test('devrait faire quelque chose', () => {
        // Votre test ici
        expect(true).toBe(true);
    });
});
```

### Nouvelle suite
1. Cr√©ez le r√©pertoire `suites/nouvelle-suite/`
2. Ajoutez vos fichiers `.test.js`
3. Modifiez `scripts/run-tests.js` pour inclure la nouvelle suite

## Debugging

### Mode verbose
Les tests affichent des informations d√©taill√©es:
- Temps d'ex√©cution
- M√©triques de performance
- Messages d'erreur complets

### Logs de transpilation
Le parser affiche les transformations:
```
üîÑ Event processing: container.onclick
‚úÖ Exemple simple trait√© avec succ√®s
```

### Inspection des r√©sultats
```javascript
// Dans vos tests
console.log('üìä R√©sultat:', result);
console.log('‚ö° Performance:', duration + 'ms');
```

## Int√©gration CI/CD

### GitHub Actions
```yaml
- name: Run SQH Tests
  run: ./run-sqh-tests.sh all
  
- name: Upload Reports
  uses: actions/upload-artifact@v3
  with:
    name: test-reports
    path: tests/reports/
```

### Scripts NPM
Ajoutez √† votre `package.json`:
```json
{
  "scripts": {
    "test:sqh": "./run-sqh-tests.sh",
    "test:sqh:framework": "./run-sqh-tests.sh framework",
    "test:sqh:report": "./run-sqh-tests.sh report"
  }
}
```

## D√©pannage

### Node.js requis
Le syst√®me n√©cessite Node.js 16+ pour JSDOM:
```bash
node --version  # Doit √™tre >= 16
```

### Fichiers manquants
V√©rifiez la structure du projet:
```bash
ls -la a/a.js
ls -la squirrel/hyper_squirrel.js
ls -la application/index.sqh
```

### Tests qui √©chouent
1. V√©rifiez les logs d√©taill√©s
2. Consultez le rapport HTML
3. Ex√©cutez une suite isol√©e
4. V√©rifiez la configuration des chemins

### Performance d√©grad√©e
- Nettoyez le registre entre les tests
- V√©rifiez les fuites m√©moire
- Ajustez les seuils si n√©cessaire

## M√©triques et seuils

### Cr√©ation d'instances
- 100 instances en < 200ms
- 1000 instances en < 2000ms

### Transpilation
- < 20ms par transpilation
- Fichiers volumineux < 5000ms

### M√©moire
- Augmentation < 10MB par cycle
- Pas de fuites importantes

## Support et contribution

### Structure des commits
```
feat(tests): ajouter tests pour nouvelle fonctionnalit√©
fix(tests): corriger test de performance
docs(tests): mettre √† jour documentation
```

### Rapport de bugs
Incluez:
- Version de Node.js
- Syst√®me d'exploitation
- Logs complets
- Fichier de configuration

---

**Version**: 1.0.0  
**Compatibilit√©**: Node.js 16+, Framework SQH v1.x  
**Derni√®re mise √† jour**: $(date +%Y-%m-%d)
EOF
  
  success "Documentation cr√©√©e"
}

# 14. VALIDATION FINALE
validate_installation() {
  header "VALIDATION DE L'INSTALLATION"
  
  local validation_passed=true
  
  # V√©rifier la structure
  local required_dirs=("core" "suites" "scripts" "config" "reports")
  for dir in "${required_dirs[@]}"; do
    if [ -d "$TESTS_DIR/$dir" ]; then
      success "R√©pertoire $dir: OK"
    else
      error "R√©pertoire $dir: MANQUANT"
      validation_passed=false
    fi
  done
  
  # V√©rifier les fichiers cl√©s
  local required_files=(
    "core/setup.js"
    "config/paths.js"
    "scripts/run-all-tests.js"
    "scripts/run-tests.js"
    "scripts/generate-report.js"
    "launch-tests.sh"
    "package.json"
    "README.md"
  )
  
  for file in "${required_files[@]}"; do
    if [ -f "$TESTS_DIR/$file" ]; then
      success "Fichier $file: OK"
    else
      error "Fichier $file: MANQUANT"
      validation_passed=false
    fi
  done
  
  # V√©rifier les permissions
  if [ -x "$TESTS_DIR/launch-tests.sh" ]; then
    success "Permissions launch-tests.sh: OK"
  else
    warn "Permissions launch-tests.sh: √Ä corriger"
    chmod +x "$TESTS_DIR/launch-tests.sh"
  fi
  
  if [ -x "$PROJECT_ROOT/run-sqh-tests.sh" ]; then
    success "Permissions run-sqh-tests.sh: OK"
  else
    warn "Permissions run-sqh-tests.sh: √Ä corriger"
    chmod +x "$PROJECT_ROOT/run-sqh-tests.sh"
  fi
  
  # Test de syntaxe Node.js
  if command -v node &> /dev/null; then
    cd "$TESTS_DIR"
    if node -c scripts/run-all-tests.js 2>/dev/null; then
      success "Syntaxe JavaScript: OK"
    else
      error "Syntaxe JavaScript: ERREUR"
      validation_passed=false
    fi
    cd "$PROJECT_ROOT"
  fi
  
  if [ "$validation_passed" = true ]; then
    success "üéâ Installation valid√©e avec succ√®s!"
    return 0
  else
    error "‚ùå Installation incompl√®te"
    return 1
  fi
}

# 15. DEMO ET TEST RAPIDE
run_quick_demo() {
  header "DEMONSTRATION RAPIDE"
  
  log "Cr√©ation d'un test de d√©monstration..."
  
  cat > "$TESTS_DIR/demo-test.js" << 'EOF'
// üöÄ Test de d√©monstration SQH
require('./core/setup');

console.log('üß™ D√©marrage du test de d√©monstration SQH...\n');

(async () => {
    try {
        // Charger le framework
        const window = await loadFramework();
        console.log('‚úÖ Framework SQH charg√©');
        
        // Test 1: Cr√©ation d'instance
        console.log('\nüìù Test 1: Cr√©ation d\'instance A');
        const instance = new window.A({
            id: 'demo-test',
            width: 200,
            height: 100,
            color: 'blue'
        });
        console.log('‚úÖ Instance cr√©√©e:', instance._data);
        
        // Test 2: Cha√Ænage de m√©thodes
        console.log('\nüìù Test 2: Cha√Ænage de m√©thodes');
        instance.width(300).height(150).color('red');
        console.log('‚úÖ Cha√Ænage OK:', `${instance.width()}x${instance.height()}, ${instance.color()}`);
        
        // Test 3: Transpilation simple
        console.log('\nüìù Test 3: Transpilation Ruby ‚Üí JavaScript');
        const rubyCode = `
            demo_container = A.new({
                id: 'transpile-demo',
                width: 250,
                height: 200
            })
            demo_container.onclick do
                puts "D√©monstration r√©ussie!"
            end
        `;
        
        const jsCode = window.hybridParser.processHybridFile(rubyCode);
        console.log('‚úÖ Transpilation r√©ussie');
        console.log('üìÑ Code g√©n√©r√© (extrait):', jsCode.substring(0, 100) + '...');
        
        // Test 4: Performance basique
        console.log('\nüìù Test 4: Performance basique');
        const startTime = Date.now();
        
        for (let i = 0; i < 10; i++) {
            new window.A({ id: `perf-${i}`, width: i * 10, height: i * 5 });
        }
        
        const duration = Date.now() - startTime;
        console.log(`‚úÖ 10 instances cr√©√©es en ${duration}ms`);
        
        console.log('\nüéâ D√âMONSTRATION R√âUSSIE!');
        console.log('üöÄ Le syst√®me de tests SQH est op√©rationnel');
        console.log('\nüí° Prochaines √©tapes:');
        console.log('   - Ex√©cutez: ./run-sqh-tests.sh');
        console.log('   - Ou: cd tests && ./launch-tests.sh');
        console.log('   - Consultez: tests/README.md');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la d√©monstration:', error.message);
        process.exit(1);
    }
})();
EOF
  
  cd "$TESTS_DIR"
  if command -v node &> /dev/null; then
    log "Ex√©cution de la d√©monstration..."
    node demo-test.js
    rm demo-test.js
  else
    warn "Node.js non disponible - d√©monstration ignor√©e"
  fi
  cd "$PROJECT_ROOT"
}

# FONCTION PRINCIPALE D'ORCHESTRATION
main() {
  header "SYST√àME DE TESTS SQH - INSTALLATION COMPL√àTE"
  
  # √âtapes d'installation
  setup_environment
  create_test_structure
  create_framework_tests
  create_parsing_tests
  create_dsl_tests
  create_performance_tests
  create_test_runner
  create_report_generator
  create_regression_tests
  install_dependencies
  create_integration_tests
  create_launcher
  create_documentation
  
  # Validation et d√©monstration
  if validate_installation; then
    run_quick_demo
    
    header "üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS!"
    
    success "‚úÖ Syst√®me de tests SQH install√© et valid√©"
    success "‚úÖ $(find "$TESTS_DIR/suites" -name "*.test.js" | wc -l) fichiers de test cr√©√©s"
    success "‚úÖ Scripts d'ex√©cution et rapports configur√©s"
    success "‚úÖ Documentation compl√®te g√©n√©r√©e"
    
    log ""
    log "üöÄ UTILISATION:"
    log "   ./run-sqh-tests.sh              # Tous les tests"
    log "   ./run-sqh-tests.sh framework    # Tests du framework A"
    log "   ./run-sqh-tests.sh parsing      # Tests de transpilation"
    log "   ./run-sqh-tests.sh dsl          # Tests des fichiers .sqh"
    log "   ./run-sqh-tests.sh performance  # Tests de performance"
    log "   ./run-sqh-tests.sh report       # G√©n√©rer rapport HTML"
    log ""
    log "üìÅ R√âPERTOIRES:"
    log "   tests/                          # Syst√®me de tests complet"
    log "   tests/suites/                   # Suites de tests"
    log "   tests/reports/                  # Rapports g√©n√©r√©s"
    log "   tests/README.md                 # Documentation d√©taill√©e"
    log ""
    log "üéØ Le syst√®me est pr√™t √† valider votre framework SQH!"
    
  else
    error "Installation √©chou√©e - v√©rifiez les erreurs ci-dessus"
    exit 1
  fi
}

# POINT D'ENTR√âE
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
  main "$@"
fi
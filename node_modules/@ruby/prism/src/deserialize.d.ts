/**
 * Accept two Uint8Arrays, one for the source and one for the serialized format.
 * Return the AST corresponding to the serialized form.
 *
 * @param {Uint8Array} source
 * @param {Uint8Array} array
 * @returns {ParseResult}
 * @throws {Error}
 */
export function deserialize(source: Uint8Array, array: Uint8Array): ParseResult;
/**
 * A location in the source code.
 *
 * @typedef {{ startOffset: number, length: number }} Location
 */
/**
 * A comment in the source code.
 *
 * @typedef {{ type: number, location: Location }} Comment
 */
/**
 * A magic comment in the source code.
 *
 * @typedef {{ startLocation: Location, endLocation: Location }} MagicComment
 */
/**
 * An error in the source code.
 *
 * @typedef {{ type: string, message: string, location: Location, level: string }} ParseError
 */
/**
 * A warning in the source code.
 *
 * @typedef {{ type: string, message: string, location: Location, level: string }} ParseWarning
 */
/**
 * The result of parsing the source code.
 *
 * @typedef {{ value: ProgramNode, comments: Comment[], magicComments: MagicComment[], errors: ParseError[], warnings: ParseWarning[] }} ParseResult
 */
/**
 * The result of calling parse.
 */
export class ParseResult {
    /**
     * @param {nodes.ProgramNode} value
     * @param {Comment[]} comments
     * @param {MagicComment[]} magicComments
     * @param {ParseError[]} errors
     * @param {ParseWarning[]} warnings
     */
    constructor(value: nodes.ProgramNode, comments: Comment[], magicComments: MagicComment[], dataLoc: any, errors: ParseError[], warnings: ParseWarning[]);
    /**
     * @type {nodes.ProgramNode}
     */
    value: nodes.ProgramNode;
    /**
     * @type {Comment[]}
     */
    comments: Comment[];
    /**
     * @type {MagicComment[]}
     */
    magicComments: MagicComment[];
    /**
     * @type {Location | null}
     */
    /**
     * @type {ParseError[]}
     */
    errors: ParseError[];
    /**
     * @type {ParseWarning[]}
     */
    warnings: ParseWarning[];
    dataLoc: any;
}
/**
 * A location in the source code.
 */
export type Location = {
    startOffset: number;
    length: number;
};
/**
 * A comment in the source code.
 */
export type Comment = {
    type: number;
    location: Location;
};
/**
 * A magic comment in the source code.
 */
export type MagicComment = {
    startLocation: Location;
    endLocation: Location;
};
/**
 * An error in the source code.
 */
export type ParseError = {
    type: string;
    message: string;
    location: Location;
    level: string;
};
/**
 * A warning in the source code.
 */
export type ParseWarning = {
    type: string;
    message: string;
    location: Location;
    level: string;
};
import * as nodes from "./nodes.js";

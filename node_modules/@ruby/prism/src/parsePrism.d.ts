/**
 * Parse the given source code.
 *
 * @typedef {{
 *   locals?: string[],
 *   forwarding?: string[]
 * }} Scope
 *
 * @typedef {{
 *   filepath?: string,
 *   line?: number,
 *   encoding?: string | false,
 *   frozen_string_literal?: boolean,
 *   command_line?: string,
 *   version?: string,
 *   main_script?: boolean,
 *   partial_script?: boolean,
 *   scopes?: (string[] | Scope)[]
 * }} Options<C>
 *
 * @param {WebAssembly.Exports} prism
 * @param {string} source
 * @param {Options} options
 * @returns {ParseResult}
 */
export function parsePrism(prism: WebAssembly.Exports, source: string, options?: Options): ParseResult;
/**
 * Parse the given source code.
 */
export type Scope = {
    locals?: string[];
    forwarding?: string[];
};
/**
 * <C>
 */
export type Options = {
    filepath?: string;
    line?: number;
    encoding?: string | false;
    frozen_string_literal?: boolean;
    command_line?: string;
    version?: string;
    main_script?: boolean;
    partial_script?: boolean;
    scopes?: (string[] | Scope)[];
};
/**
 * Pack the given values using the given template. This function matches a
 * subset of the functionality from Ruby's Array#pack method.
 */
export type PackValues = (number | string)[];
/**
 * Pack the given values using the given template. This function matches a
 * subset of the functionality from Ruby's Array#pack method.
 */
export type PackTemplate = string[];
import { ParseResult } from "./deserialize.js";

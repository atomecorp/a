/**
 * ðŸš€ SQUIRREL.JS - BUNDLE ENTRY POINT
 * Point d'entrÃ©e pour gÃ©nÃ©rer le bundle CDN unique
 */

// === IMPORTS DES MODULES CORE ===
import { $, define, observeMutations } from './squirrel.js';
import './apis.js';
import PluginManager from './plugin-manager.js';
import PluginAPI from './plugin-api.js';

// === IMPORTS DES COMPOSANTS ===
import * as ButtonBuilder from './components/button_builder.js';
import * as SliderBuilder from './components/slider_builder.js';
import * as MatrixBuilder from './components/matrix_builder.js';
import * as TableBuilder from './components/table_builder.js';
import * as ListBuilder from './components/List_builder.js';
import * as MenuBuilder from './components/menu_builder.js';
import * as DraggableBuilder from './components/draggable_builder.js';
import * as UnitBuilder from './components/unit_builder.js';
// REMOVED: import * as WaveSurferBuilder from './components/waveSurfer_builder.js'; // File not found

// === INITIALISATION DU FRAMEWORK ===
function initSquirrel() {
  console.log('ðŸ”„ Initialisation de Squirrel.js...');
  
  // Exposer les utilitaires de base
  window.$ = $;
  window.define = define;
  window.observeMutations = observeMutations;
  window.body = document.body;
  window.toKebabCase = (str) => str.replace(/([A-Z])/g, '-$1').toLowerCase();
  
  // CrÃ©er le plugin manager
  const pluginManager = new PluginManager();
  window.pluginManager = pluginManager;
  
  // CrÃ©er l'API des plugins
  const pluginAPI = new PluginAPI(pluginManager);
  window.Squirrel = pluginAPI;
  
  // === EXPOSITION DES COMPOSANTS ===
  
  // Button
  if (ButtonBuilder.default && ButtonBuilder.default.create) {
    window.Button = ButtonBuilder.default.create;
    window.ButtonStyles = ButtonBuilder.default;
    pluginManager.loadedPlugins.add('Button');
    console.log('  âœ… Button exposÃ©');
  }
  
  // Slider
  if (SliderBuilder.default && SliderBuilder.default.create) {
    window.Slider = SliderBuilder.default.create;
    window.SliderStyles = SliderBuilder.default;
    pluginManager.loadedPlugins.add('Slider');
    console.log('  âœ… Slider exposÃ©');
  }
  
  // Matrix
  if (MatrixBuilder.default && MatrixBuilder.default.create) {
    window.Matrix = MatrixBuilder.default.create;
    window.MatrixStyles = MatrixBuilder.default;
    pluginManager.loadedPlugins.add('Matrix');
    console.log('  âœ… Matrix exposÃ©');
  }
  
  // Table
  if (TableBuilder.default && TableBuilder.default.create) {
    window.Table = TableBuilder.default.create;
    window.TableStyles = TableBuilder.default;
    pluginManager.loadedPlugins.add('Table');
    console.log('  âœ… Table exposÃ©');
  }
  
  // List
  if (ListBuilder.default && ListBuilder.default.create) {
    window.List = ListBuilder.default.create;
    window.ListStyles = ListBuilder.default;
    pluginManager.loadedPlugins.add('List');
    console.log('  âœ… List exposÃ©');
  }
  
  // Menu
  if (MenuBuilder.default && MenuBuilder.default.create) {
    window.Menu = MenuBuilder.default.create;
    window.MenuStyles = MenuBuilder.default;
    pluginManager.loadedPlugins.add('Menu');
    console.log('  âœ… Menu exposÃ©');
  }
  
  // Draggable
  if (DraggableBuilder.draggable) {
    window.Draggable = DraggableBuilder.draggable;
    window.draggable = DraggableBuilder.draggable;
    window.makeDraggable = DraggableBuilder.makeDraggable;
    window.makeDraggableWithDrop = DraggableBuilder.makeDraggableWithDrop;
    window.makeDropZone = DraggableBuilder.makeDropZone;
    pluginManager.loadedPlugins.add('Draggable');
    console.log('  âœ… Draggable exposÃ©');
  }
  
  // Unit
  if (UnitBuilder.default && UnitBuilder.default.create) {
    window.Unit = UnitBuilder.default.create;
    window.UnitStyles = UnitBuilder.default;
    pluginManager.loadedPlugins.add('Unit');
    console.log('  âœ… Unit exposÃ©');
  }
  
  // WaveSurfer
  if (WaveSurferBuilder.default && WaveSurferBuilder.default.create) {
    window.WaveSurfer = WaveSurferBuilder.default.create;
    window.WaveSurferStyles = WaveSurferBuilder.default;
    pluginManager.loadedPlugins.add('WaveSurfer');
    console.log('  âœ… WaveSurfer exposÃ©');
  }
  
  // API pour le chargement manuel (pour compatibilitÃ©)
  window.loadPlugin = async (pluginName) => {
    console.log(`âœ… Plugin ${pluginName} dÃ©jÃ  chargÃ© dans le bundle`);
    return window[pluginName];
  };
  
  // Status final
  const loadedCount = pluginManager.loadedPlugins.size;
  console.log(`ðŸŽ¯ Squirrel.js v1.0.0 prÃªt!`);
  console.log(`ðŸ“Š ${loadedCount} composants disponibles`);
  console.log('ðŸ§© Composants:', Array.from(pluginManager.loadedPlugins));
  
  // === EXÃ‰CUTION DU KICKSTART Ã€ LA FIN ===
  console.log('ðŸš€ ExÃ©cution du kickstart...');
  
  // Inclure le code du kickstart directement ici
  // Template basique
  define('view', {
    tag: 'div',
    class: 'atome',
    id: 'view',
  });

  // Animation avec CSS
  $('view', {
    parent: document.body,
    css: {
      background: '#272727',
      color: 'lightgray',
      left: '0px',
      top: '0px',
      position: 'absolute',
      width: '100%',
      height: '100%',
      overflow: 'auto',
    }
  });
  
  console.log('âœ… Kickstart terminÃ© - Vue principale crÃ©Ã©e');
  
  // Ã‰mettre un Ã©vÃ©nement pour signaler que tout est prÃªt
  window.dispatchEvent(new CustomEvent('squirrel:ready', {
    detail: { 
      version: '1.0.0', 
      components: Array.from(pluginManager.loadedPlugins),
      count: loadedCount,
      kickstart: true
    }
  }));
}

// === AUTO-INITIALISATION ===
if (typeof window !== 'undefined') {
  // Si on est dans un navigateur, initialiser automatiquement
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSquirrel);
  } else {
    // DOM dÃ©jÃ  prÃªt
    setTimeout(initSquirrel, 0);
  }
} else {
  // Environnement Node.js ou autre
  console.log('Squirrel.js chargÃ© en environnement non-navigateur');
}

// Export pour Rollup
export { initSquirrel };
